version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: backlink-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-backlink_tracker}
      POSTGRES_USER: ${POSTGRES_USER:-backlink_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema-postgresql.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed-postgresql.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - backlink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-backlink_user} -d ${POSTGRES_DB:-backlink_tracker}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Next.js Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: backlink-app
    restart: unless-stopped
    environment:
      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER:-backlink_user}:${POSTGRES_PASSWORD:-change_this_password}@postgres:5432/${POSTGRES_DB:-backlink_tracker}
      
      # App configuration
      NODE_ENV: production
      PORT: 3000
      NEXT_TELEMETRY_DISABLED: 1
      
      # Security
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-generate_a_secure_secret_here}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backlink-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local

# Network for service communication
networks:
  backlink-network:
    driver: bridge 